---
# - hosts: photonos
#   become: yes
#   gather_facts: no
#   vars:
#     ansible_ssh_user: "lab"
#     ansible_ssh_pass: "{{ vault_lab_password }}"
#     ansible_become_pass: "{{ vault_lab_password }}"
#     local_user: "{{ lookup('env', 'USER') }}"
  
#   tasks:
#   # - name: GENERATE SSH KEY
#   #   shell: ls /home/{{ansible_ssh_user}}/.ssh/id_rsa || /usr/bin/ssh-keygen -b 2048 -t rsa -f /home/{{ansible_ssh_user}}/.ssh/id_rsa -q -N ""
#   #   become: no
#   #   delegate_to: localhost
#   #   ignore_errors: yes
#   #   run_once: yes

#   # - name: Make a ".ssh" Directory for the lab user
#   #   file: path=/home/lab/.ssh state=directory mode=0755

#   # - name: Make a ".ssh" Directory for the Root user
#   #   file: path=/root/.ssh state=directory mode=0755

#   # - name: Copy our Authorized Key to the lab user
#   #   copy: src=/home/{{ansible_ssh_user}}/.ssh/id_rsa.pub dest=/home/lab/.ssh/authorized_keys

#   # - name: Copy our Authorized Key to the Root user
#   #   copy: src=/home/{{ansible_ssh_user}}/.ssh/id_rsa.pub dest=/root/.ssh/authorized_keys

#   # - name: reboot Linux
#   #   reboot:
#   #     reboot_timeout: 360
#   #   tags:
#   #     - reboot

#   # - name: Add photon repository
#   #   yum_repository:
#   #     name: photon repo
#   #     description: photon repo
#   #     baseurl: "{{ photon_yum_repo }}"
#   #     enabled: "{{ photon_yum_repo_enabled }}"

#   # - name: ensure yum is installed
#   #   command: bash -c "rpm -q yum || tdnf install -y yum" creates=/usr/bin/yum

#   # - name: Update default Photon packages to latest
#   #   command: tdnf -y distro-sync

#   - name: change the hostname. hostname module not available in photon
#     lineinfile: 
#       path: /etc/hostname
#       regexp: '.*'
#       line: "{{ hostname }}"
#       state: present
#       # backrefs: yes

#   - name: add hostname to /etc/hosts
#     lineinfile:
#       dest: /etc/hosts
#       regexp: '^127\.0\.0\.1[ \t]+localhost'
#       line: '127.0.0.1 localhost {{ hostname }}'
#       state: present

#   - name: add additional packages
#     command: bash -c "tdnf install -y {{ item }}"
#     become: yes
#     with_items: "{{ photon_packages }}"

#   # - name: chmod for network directory
#   #   file:
#   #     path: /etc/systemd/network/
#   #     state: directory
#   #     mode: a+x
#   #   tags:
#   #     - netcfg

#   - name: find legacy network cfg file
#     find:
#       paths: "/etc/systemd/network/"
#       patterns: "*.network"
#     register: to_delete
#     tags:
#       - netcfg

#   # - debug: var=to_delete
#   #   tags:
#   #     - netcfg

#   - name: delete legacy network cfg file
#     file:
#       path: "{{ item.path }}"
#       state: absent
#     with_items: "{{ to_delete.files }}"
#     tags:
#       - netcfg

#   - name: generate network template and set read permission
#     template:
#       src: templates/photonos_intf.j2
#       dest: /etc/systemd/network/static-en-{{ item }}.network
#       mode: a+r
#     with_items:
#       - eth0
#       - eth1
#       - lo
#     notify:
#       - Restart network deamon
#     tags:
#       - netcfg

#   - name: Apply the iptable rules for icmp
#     include_tasks: ./tasks/iptable_rules.yaml
#     tags:
#       - iptable

#   handlers:
#     - name: Restart network deamon
#       ansible.builtin.service:
#         name: systemd-networkd
#         state: restarted


- hosts: ubuntu
  become: yes
  gather_facts: no
  vars:
    ansible_ssh_user: "lab"
    ansible_ssh_pass: "{{ vault_lab_password }}"
    ansible_become_pass: "{{ vault_lab_password }}"
    local_user: "{{ lookup('env', 'USER') }}"
  
  tasks:
  # - name: GENERATE SSH KEY
  #   shell: ls /home/{{ansible_ssh_user}}/.ssh/id_rsa || /usr/bin/ssh-keygen -b 2048 -t rsa -f /home/{{ansible_ssh_user}}/.ssh/id_rsa -q -N ""
  #   become: no
  #   delegate_to: localhost
  #   ignore_errors: yes
  #   run_once: yes

  # - name: Change user password
  #   vars:
  #     ansible_ssh_user: "root"
  #     ansible_ssh_pass: "{{ vault_lab_password }}"
  #   user: 
  #     name: "{{ ansible_ssh_user }}"
  #     # password: "$1$A2BdvCtP$z0Es8C57XrmnK.ETqUtob/"  #openssl passwd -1
  #     password: "{{ ansible_ssh_pass | password_hash('sha512')}}"  #sha approach
  #     state: present
  #   tags: 
  #   - passwd
  #   - user

  - name: Make a ".ssh" Directory for the lab user
    file: path=/home/lab/.ssh state=directory mode=0755

  - name: Make a ".ssh" Directory for the Root user
    file: path=/root/.ssh state=directory mode=0755

  - name: Copy our Authorized Key to the lab user
    # copy: src=/home/{{ansible_ssh_user}}/.ssh/id_rsa.pub dest=/home/lab/.ssh/authorized_keys
    copy: src=~xji/.ssh/id_rsa.pub dest=/home/lab/.ssh/authorized_keys

  - name: Copy our Authorized Key to the Root user
    # copy: src=/home/{{ansible_ssh_user}}/.ssh/id_rsa.pub dest=/root/.ssh/authorized_keys
    copy: src=~xji/.ssh/id_rsa.pub dest=/root/.ssh/authorized_keys

  - name: Update apt-get repo and cache
    apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

  - name: Upgrade all apt packages
    apt: upgrade=dist force_apt_get=yes

  - name: Check if a reboot is needed for Debian and Ubuntu boxes
    register: reboot_required_file
    stat: path=/var/run/reboot-required get_md5=no

  - name: Reboot the Debian or Ubuntu server
    reboot:
      msg: "Reboot initiated by Ansible due to kernel updates"
      connect_timeout: 5
      reboot_timeout: 300
      pre_reboot_delay: 0
      post_reboot_delay: 30
      test_command: uptime
    when: reboot_required_file.stat.exists

  - name: Install the basic packages on Ubuntu
    apt:
      name: "{{ ubuntu_packages }}"
      state: present
    # notify:
    #     - system start lldpd
    tags:
      - package
      # - interface

  - name: Make sure we have a 'devops' group
    group:
      name: devops
      state: present
    tags:
      - users

  - name: Allow 'devops' group to have passwordless sudo
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%devops'
      line: '%devops ALL=(ALL) NOPASSWD: ALL'
      validate: visudo -cf %s
    tags:
      - users

  - name: Add the users under Unbuntu
    user:
      name: "{{ item.name }}"
      shell: /bin/bash
      groups: "{{ item.groups }}"
      password: "{{ item.password | password_hash('sha512') }}"
      generate_ssh_key: yes
      append: yes
      state: "{{ item.state }}"
    with_items: "{{ ubuntu_users }}"
    tags:
      - users

  # - name: generate network layer2 bond configuration
  #   template:
  #     src: templates/compute/ubuntu_trunk.j2
  #     dest: /etc/netplan/00-installer-config.yaml
  #     mode: a+r
  #   # notify:
  #   #   - Netplan Apply
  #   tags:
  #     - netcfg

  # - name: generate Calico layer3 interface configuration
  #   template:
  #     src: templates/compute/ubuntu_intf.j2
  #     dest: /etc/netplan/00-installer-config.yaml
  #     mode: a+r
  #   notify:
  #     - Netplan Apply
  #   when: (cali_ports is defined and cali_ports)
  #   tags:
  #     - netcfg

  # - name: refresh ZTP/DHCP Services
  #   block:
  #   - name: Refresh DHCP Server Conf
  #     copy:
  #         src: ztp/dhcpd.conf
  #         dest: /etc/dhcp/dhcpd.conf
  #         mode: u=rw,g=r,o=r
  #     notify:
  #       - DHCP Restart
  #     tags:
  #       - isc_dhcp

    # - name: Refresh SONiC JSON Files
    #   copy:
    #       src: ztp/{{ item }}
    #       dest: /var/www/html/{{ item }}
    #       mode: u=rw,g=r,o=r
    #   loop:
    #     - "init_config_db.json"
    #     - "ztp.json"
    #     - "set-password.sh"
    #   tags:
    #     - ztp_json
    # when: ('netserv' in inventory_hostname)
    # tags:
    #   - ztp

- hosts: netbox01
  become: yes
  vars:
    netbox_stable: true
    netbox_database_socket: "{{ postgresql_unix_socket_directories[0] }}"
    netbox_superuser_password: netbox
    netbox_socket: "0.0.0.0:80"
    netbox_config:
      ALLOWED_HOSTS:
        - netbox01
      MEDIA_ROOT: "{{ netbox_shared_path }}/media"
      REPORTS_ROOT: "{{ netbox_shared_path }}/reports"
      SCRIPTS_ROOT: "{{ netbox_shared_path }}/scripts"
    postgresql_users:
      - name: "{{ netbox_database_user }}"
        role_attr_flags: CREATEDB,NOSUPERUSER
    redis_bind: 127.0.0.1
    redis_version: 6.0.9
    redis_checksum: sha256:dc2bdcf81c620e9f09cfd12e85d3bc631c897b2db7a55218fd8a65eaa37f86dd
  roles:
    - geerlingguy.postgresql
    - davidwittman.redis
    - lae.netbox

  # - name: NMCLI the k8s uplink IP
  #   community.general.nmcli:
  #     conn_name: "{{ item.conn_name }}"
  #     ifname: "{{ item.dev }}"
  #     type: ethernet
  #     ip4: "{{ item.addr_v4 }}/{{ k8s_tor_netmaskv4 }}"
  #     ip6: "{{ item.addr_v6 }}/{{ k8s_tor_netmaskv6 }}"
  #     state: present
  #   loop: "{{ k8s_uplinks }}"
  #   tags:
  #     - interface

  handlers:
    - name: system start lldpd
      systemd:
          state: started
          enabled: yes
          name: lldpd
      # register: output  

    - name: system start networking
      systemd:
          state: restarted
          name: networking
      # register: output  

    - name: Netplan Apply
      command: netplan apply
      become: yes
      register: output  

    - name: DHCP Restart
      systemd:
          state: restarted
          name: isc-dhcp-server
      # register: output  
