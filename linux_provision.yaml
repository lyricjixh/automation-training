---
- hosts: ubuntu
  become: yes
  gather_facts: no
  vars:
    ansible_ssh_user: "lab"
    ansible_ssh_pass: "{{ vault_lab_password }}"
    ansible_become_pass: "{{ vault_lab_password }}"
    local_user: "{{ lookup('env', 'USER') }}"
  
  tasks:
  - name: Add the Users/Groups
    tags:
      - user
    block:
    - name: Make a ".ssh" Directory for the lab user
      file: path=/home/lab/.ssh state=directory mode=0755

    - name: Make a ".ssh" Directory for the Root user
      file: path=/root/.ssh state=directory mode=0755

    - name: Copy our Authorized Key to the lab user
      # copy: src=/home/{{ansible_ssh_user}}/.ssh/id_rsa.pub dest=/home/lab/.ssh/authorized_keys
      copy: src=~xji/.ssh/id_rsa.pub dest=/home/lab/.ssh/authorized_keys

    - name: Copy our Authorized Key to the Root user
      # copy: src=/home/{{ansible_ssh_user}}/.ssh/id_rsa.pub dest=/root/.ssh/authorized_keys
      copy: src=~xji/.ssh/id_rsa.pub dest=/root/.ssh/authorized_keys

    - name: Make sure we have a 'devops' group
      group:
        name: devops
        state: present

    - name: Allow 'devops' group to have passwordless sudo
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: '^%devops'
        line: '%devops ALL=(ALL) NOPASSWD: ALL'
        validate: visudo -cf %s

    - name: Add the users under Unbuntu
      user:
        name: "{{ item.name }}"
        shell: "/bin/bash"
        groups: "{{ item.groups }}"
        password: "{{ item.password | password_hash('sha512') }}"
        generate_ssh_key: yes
        append: yes
        state: "{{ item.state }}"
      with_items: "{{ ubuntu_users }}"

    - name: Upload the Vault Key
      copy:
        src: "~/.vault_pass"
        dest: ".vault_pass"
        owner: lab
        group: lab
        mode: 0644
      tags:
        - vault

  - name: Add the Dependency Packages
    tags:
      - package
    block:
    - name: Update apt-get repo and cache
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    - name: Upgrade all apt packages
      apt: upgrade=dist force_apt_get=yes

    - name: Check if a reboot is needed for Debian and Ubuntu boxes
      register: reboot_required_file
      stat: path=/var/run/reboot-required get_md5=no

    - name: Reboot the Debian or Ubuntu server
      reboot:
        msg: "Reboot initiated by Ansible due to kernel updates"
        connect_timeout: 5
        reboot_timeout: 300
        pre_reboot_delay: 0
        post_reboot_delay: 30
        test_command: uptime
      when: reboot_required_file.stat.exists

    - name: Install the basic packages on Ubuntu
      apt:
        name: "{{ ubuntu_packages }}"
        state: present
        update_cache: true
      notify:
          - system start lldpd

  - name: Install Python3 and PIP3
    tags:
      - python
    block:
    - name: Add Deadsnakes PPA Repository for Python
      apt_repository:
        repo: ppa:deadsnakes/ppa
        state: present
        update_cache: true

    - name: Update apt and install Python with Specific Version
      apt:
        name: "python{{ python3_version }}"
        state: present
        update_cache: true

    - name: Upgrade pip3
      pip:
        name: pip
        extra_args: --upgrade
      tags:
        - pip

    - name: PIP Install packages
      pip:
        name: "{{ item }}"
        state: present
      loop: "{{pip_packages}}"
      tags:
        - pip

  - name: Install Docker Engine
    tags:
      - docker-ce
    block:
    - name: Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu {{ubuntu_release}} stable
        state: present

    - name: Update apt and install docker-ce
      apt:
        name: docker-ce
        state: latest
        update_cache: true

    - name: Install Docker Module for Python
      pip:
        name: docker

    - name: Install docker collection
      community.general.ansible_galaxy_install:
        type: collection
        name: community.docker
      tags: inst_collection

    # - name: Pull default Docker image
    #   community.docker.docker_image:
    #     name: "{{ default_container_image }}"
    #     source: pull

    # - name: Create default containers
    #   community.docker.docker_container:
    #     name: "{{ default_container_name }}{{ item }}"
    #     image: "{{ default_container_image }}"
    #     command: "{{ default_container_command }}"
    #     state: present
    #   with_sequence: count={{ container_count }}

  - name: Install Ansible
    tags:
      - ansible
    block:
    - name: Add Ansible Repository
      apt_repository:
        repo: ppa:ansible/ansible
        state: present
        update_cache: true

    - name: Update apt and install Ansible Latest
      apt:
        name: ansible
        state: latest
        update_cache: true

    - name: Install Ansible-Core with 2.13.10 (AVD requirement)
      pip:
        name: ansible-core==2.13.10

    - name: Check Ansible Version
      command: "ansible --version"
      register: showlog

    - name: Display Showlog Stdout
      debug: 
        var: showlog.stdout

  - name: Install Git and Check Git Repo
    tags:
      - git
    block:
    - name: Add Git Repository
      apt_repository:
        repo: ppa:git-core/ppa
        state: present
        update_cache: true

    - name: Update apt and install Git Latest
      apt:
        name: git
        state: latest
        update_cache: true

    - name: Check Git Version
      command: "git --version"
      register: showlog

    - name: Display Showlog Stdout
      debug: 
        var: showlog.stdout

    - name: Config Git
      git_config:
        name: "{{ git_cfg.name }}"
        scope: "{{ git_cfg.scope }}"

    - name: List Git Config
      git_config:
        list_all: yes
        scope: "{{ git_cfg.scope }}"
      register: showlog

    - name: Display Showlog Stdout
      debug: 
        var: showlog.stdout

    - name: Virutal Lab Git checkout
      ansible.builtin.git:
        repo: '{{clab_git_repo}}'
        dest: './training'
        update: yes
      become: False
      tags:
        - gitrepo

  - name: Install Containerlab
    tags:
      - containerlab
    block:
    - name: Download Containerlab Inst Script
      get_url:
        url: https://get.containerlab.dev
        dest: /tmp/clab_inst.sh
        mode: 0755

    - name: Execute Clab Script
      command: bash -c /tmp/clab_inst.sh

    - name: Remove the script
      file:
        path: /tmp/clab_inst.sh
        state: absent

    - name: check containerlab version
      command: "containerlab version"
      register: showlog

    - name: Display Showlog Stdout
      debug: 
        var: showlog.stdout

  - name: Staging Virtual Lab with Containerlab
    tags:
      - containerlab
    block:
    - name: Upload cEOS Image
      copy:
        src: "../{{image_dir}}/cEOS-lab-{{eos_ver}}.tar"
        dest: "{{image_dir}}/"
        owner: lab
        group: lab
        mode: 0644
      tags:
        - copyimage
        
    - name: Load cEOS image(s)
      command: "docker import {{image_dir}}/cEOS-lab-{{eos_ver}}.tar ceos:{{eos_ver}}"
      tags:
        - loadimage

    # - name: Load cEOS image(s)
    #   docker_image:
    #     name: "ceos"
    #     load_path: "/home/lab/images/cEOS-lab-4.30.2F.tar"
    #     state: present
    #     source: load
    #   register: result
    #   tags:
    #     - loadimage

    # - name: Print the loaded image names
    #     debug:
    #     msg: "Loaded the following images: {{ result.ceos:4.30.2F | join(', ') }}"
    #   tags:
    #     - loadimage

    - name: Check Docker cEOS image(s)
      command: "docker image ls"
      register: showlog
      tags:
        - loadimage

    - name: Display Showlog Stdout
      debug: 
        var: showlog.stdout
      tags:
        - loadimage

    - name: Provision Virtual CLAB Topology
      command: "containerlab deploy -t {{ clab_topo }} --reconfigure"
      tags:
        - clab

    - name: Waiting 15 sec for Virtual Topolgy Ready
      wait_for:
        timeout: 15
      tags:
        - wait

    - name: Inspect Virtual Topolgy
      command: "sudo containerlab inspect -t {{ clab_topo }}"
      register: showlog
      tags:
        - clab

    - name: Display Showlog Stdout
      debug: 
        var: showlog.stdout
      tags:
        - clab

  handlers:
    - name: system start lldpd
      systemd:
          state: started
          enabled: yes
          name: lldpd
      # register: output  

    - name: system start networking
      systemd:
          state: restarted
          name: networking
      # register: output  

    - name: Netplan Apply
      command: netplan apply
      become: yes
      register: output  

    - name: DHCP Restart
      systemd:
          state: restarted
          name: isc-dhcp-server
      # register: output  

